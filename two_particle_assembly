
	        .data
redData:	.word   0:4
greenData:      .word   0:4
prmpt1:	 .asciiz "Enter x-coordinate for red particle (0 to 10):"
prmpt2:	 .asciiz "Enter y-coordinate for red particle (0 to 10):"
prmpt3:	 .asciiz "Enter x-coordinate for green particle (0 to 10):"
prmpt4:	 .asciiz "Enter y-coordinate for green particle (0 to 10):"
prmpt5:	 .asciiz "cycle "
prmpt6:	 .asciiz "red particle (x,y,xVel,yVel): "
prmpt7:	 .asciiz "green particle (x,y,xVel,yVel): "
prmpt8:	 .asciiz "Collison: oops, end of simulation!\n"
space:   .asciiz " "
endl:	 .asciiz "\n"

# i     $s0
# cycle $s1 = 0
# dist  $s2

	.text

main:	li      $s1,0

	la      $s3,redData     #  redData[2] = 1 ;
	li      $s4,1
	sw      $s4,8($s3)
	sw      $s4,12($s3)     #  redData[3] = 1 ;
	la      $s3,greenData   #  greenData[2] = -1 ;
	li      $s4,-1
	sw      $s4,8($s3)
	sw      $s4,12($s3)     #  greenData[3] = -1 ;

	la      $a0,prmpt1      #  cout << prmpt1 ;
	li      $v0,4
	syscall
	la      $s3,redData
	li      $v0,5           #  cin >> redData[0] ;
	syscall
	sw      $v0,($s3)
	la      $a0,prmpt2      #  cout << prmpt2 ;
	li      $v0,4
	syscall
	li      $v0,5           #  cin >> redData[1] ;
	syscall
	sw      $v0,4($s3)
	la      $a0,prmpt3      #  cout << prmpt3 ;
	li      $v0,4
	syscall
	la      $s3,greenData   #  cin >> greenData[0] ;
	li      $v0,5
	syscall
	sw      $v0,($s3)
	la      $a0,prmpt4      #  cout << prmpt4 ;
	li      $v0,4
	syscall
	li      $v0,5           #  cin >> greenData[1] ;
	syscall
	sw      $v0,4($s3)

loop:	                        #  do {
	la      $a0,prmpt5      #    cout << "cycle " << cycle << endl ;
	li      $v0,4
	syscall
	move    $a0,$s1
	li      $v0,1
	syscall
	la      $a0,endl
	li      $v0,4
	syscall
	la      $a0,prmpt6      #    cout << "red particle (x,y,xVel,yVel): "
	li      $v0,4
	syscall
	la      $s3, redData
	lw      $a0,($s3)       #       << redData[0]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,4($s3)      #       << redData[1]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,8($s3)      #       << redData[2]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,12($s3)     #       << redData[3]
	li      $v0,1
	syscall
	la      $a0,endl        #       << endl ;
	li      $v0,4
	syscall
	la      $a0,prmpt7      #    cout << "green particle (x,y,xVel,yVel): "
	li      $v0,4
	syscall
	la      $s3, greenData
	lw      $a0,($s3)       #       << greenData[0]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,4($s3)      #       << greenData[1]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,8($s3)      #       << greenData[2]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,12($s3)     #       << greenData[3]
	li      $v0,1
	syscall
	la      $a0,endl        #       << endl ;
	li      $v0,4
	syscall
	la      $a0,endl        #       << endl ;
	li      $v0,4
	syscall

	la      $a0,redData     #    updatePoint(redData) ;
	jal     updatePoint
	la      $a0,greenData   #    updatePoint(greenData) ;
	jal     updatePoint
	
	la      $s3,redData     #    dist = findDistance(redData[0],
	lw      $a0,($s3)       #       redData[1], greenData[0],
	lw      $a1,4($s3)      #       greenData[1]) ;
	la      $s4,greenData
	lw      $a2,($s4)
	lw      $a3,4($s4)
	jal     findDistance
	move    $s2,$v0
	add     $s1,$s1,1       #    cycle++ ;
	ble     $s2,2,exit      #  } while ((dist > 2) && (cycle < 10)) ;
	blt     $s1,10,loop
exit:
	bgt     $s2,2,end       #  if (dist <= 2) {
	la      $a0,prmpt8      #    cout << prmpt8 ;
	li      $v0,4
	syscall
	la      $a0,prmpt6      #    cout << "red particle (x,y,xVel,yVel): "
	li      $v0,4
	syscall
	la      $s3, redData
	lw      $a0,($s3)       #       << redData[0]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,4($s3)      #       << redData[1]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,8($s3)      #       << redData[2]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,12($s3)     #       << redData[3]
	li      $v0,1
	syscall
	la      $a0,endl        #       << endl ;
	li      $v0,4
	syscall
	la      $a0,prmpt7      #    cout << "green particle (x,y,xVel,yVel): "
	li      $v0,4
	syscall
	la      $s3, greenData
	lw      $a0,($s3)       #       << greenData[0]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,4($s3)      #       << greenData[1]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,8($s3)      #       << greenData[2]
	li      $v0,1
	syscall
	la      $a0,space       #       << " "
	li      $v0,4
	syscall
	lw      $a0,12($s3)     #       << greenData[3]
	li      $v0,1
	syscall
	la      $a0,endl        #       << endl ;
	li      $v0,4
	syscall
	la      $a0,endl        #       << endl ;
	li      $v0,4
	syscall
end:	li      $v0,10          #  }
	syscall                 #}
	 
 # updatePoint procedure
 # Update position and velocity of particle
 # $a0 is array address of data for particle
 # $s0 will store base address of passed array (i.e., from $a0)
 # $s1 represents distance.
updatePoint:
    subu $sp, $sp, 28
    sw $ra, ($sp)
    sw $s0, 4($sp)
    sw $s1, 8($sp)
    sw $s2, 12($sp)
    sw $s3, 16($sp)
    sw $s4, 20($sp)
    sw $s5, 24($sp)
 
    move $s0, $a0                        # $s0 is base address.
    
    lw $a0, ($s0)
    lw $a1, 4($s0)
    li $a2, 0
    li $a3, -1
    jal findDistance
    move $s1, $v0                        # $s1 contains distance.
    
    blt $s1, 1, if_1
    b if_1_end
    if_1:
        lw $s2, 8($s0)                   # $s2 = arg[2]
        blt $s2, 0, if_1_1
        b if_1_end
        if_1_1:
            mul $s2, $s2, -1             # arg[2] = - arg[2];
            sw $s2, 8($s0)    
    if_1_end:
    
    lw $a0, ($s0)
    lw $a1, 4($s0)
    li $a2, 10
    li $a3, -1
    jal findDistance
    move $s1, $v0                        # $s1 contains distance.
    
    blt $s1, 1, if_2
    b if_2_end
    if_2:
        lw $s2, 8($s0)
        bgt $s2, 0, if_2_1
        b if_2_end
        if_2_1:
            mul $s2, $s2, -1
            sw $s2, 8($s0)
    if_2_end:
    
    lw $a0, ($s0)
    lw $a1, 4($s0)
    li $a2, -1
    li $a3, 0
    jal findDistance
    move $s1, $v0                         # $s1 contains distance.
    
    blt $s1, 1, if_3
    b if_3_end
    if_3:
        lw $s2, 12($s0)
        blt $s2, 0, if_3_1
        b if_3_end
        if_3_1:
            mul $s2, $s2, -1
            sw $s2, 12($s0)               # arg[3] = - arg[3];
    if_3_end:
 
    lw $a0, ($s0)
    lw $a1, 4($s0)
    li $a2, -1
    li $a3, 10
    jal findDistance
    move $s1, $v0                        # $s1 contains distance.
    
    blt $s1, 1, if_4
    b if_4_end
    if_4:
        lw $s2, 12($s0)
        bgt $s2, 0, if_4_1
        b if_4_end
        if_4_1:
            mul $s2, $s2, -1
            sw $s2, 12($s0)
    if_4_end:
    
    # $s2 cotains args[0]
    # $s3 contains args[1]
    # $s4 contains args[2]
    # $s5 contains args[3]
    lw $s2, ($s0)
    lw $s3, 4($s0)
    lw $s4, 8($s0)
    lw $s5, 12($s0)
    
    #  arg[0] = arg[0] + arg[2];
    add $s2, $s2, $s4
    sw $s2, ($s0)
    
    # arg[1] = arg[1] + arg[3];
    add $s3, $s3, $s5
    sw $s3, 4($s0)
        
    lw $ra, ($sp)
    lw $s0, 4($sp)
    lw $s1, 8($sp)
    lw $s2, 12($sp)
    lw $s3, 16($sp)
    lw $s4, 20($sp)
    lw $s5, 24($sp)
    addu $sp, $sp, 28
    jr $ra

# Find Manhattan distance between two particles, or between
# a particle and a wall.
# ($a0, $a1) are the (x,y) coordinates for first particle/wall
# ($a2, $a3) are the (x,y) coordinates for second particle/wall
# $s0 is distX
# $s1 is distY
# $v0 contains return value (i.e., distance).
findDistance:
    subu $sp, $sp, 12
    sw $ra, ($sp)
    sw $s0, 4($sp)
    sw $s1, 8($sp)
    
    sub $s0, $a0, $a2                    # distX = arg0 - arg2;
    bge $s0, 0, findDistance_exit_1      # if (distX < 0)
        mul $s0, $s0, -1
    
    findDistance_exit_1:
    sub $s1, $a1, $a3			 # distY = arg1 - arg3;
    bge $s1, 0, findDistance_exit_2      # if (distY < 0)
        mul $s1, $s1, -1    		 # distY = - distY;
         
    findDistance_exit_2:
    blt $a0, 0, if_5
    blt $a2, 0, if_5
    b else_if_5
    if_5:
        move $v0, $s1                    # return distY
        b if_5_end
    else_if_5:
    	blt $a1, 0, else_if_5_1
    	blt $a3, 0, else_if_5_1
    	b else_5
    	
    	else_if_5_1:
    	    move $v0, $s0                # return distX
    	    b if_5_end	
    else_5:
        add $v0, $s0, $s1
    if_5_end: 
   	    
    lw $ra, ($sp)
    lw $s0, 4($sp)
    lw $s1, 8($sp)
    addu $sp, $sp, 12
    jr $ra
